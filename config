#!/bin/bash

set -e

PP=$(dirname $0)

source $PP/lib.bash
source $PP/checks.bash

source_conf
ask_init

def GRANT "$(defgrant)"
def TCLB "$(pwd)"
def CONFOPT "--disable-cuda"
adv RHOME $(R RHOME 2>/dev/null)
def RUN_SINGULARITY "n" "yn"
def RUN_GPU "y" "yn"
function RUN_GPU_CHECK {
	case "$RUN_GPU" in
	n) def CONFOPT "--disable-cuda" ;;
	y) def CONFOPT "--with-cuda-arch=sm_30" ;;
	esac
}
def MODULES_BASE "purge"
adv RUN_SINGULARITY "n" "yn"
adv DEBUG_QOS ""
adv MAIN_QOS ""
adv CORES_PER_TASK_FULL "1"
adv MEMORY_PER_CORE ""
adv MODULES_ADD  ""
adv MODULES_RUN  ""
adv MODULES_CHECK_AVAILABILITY "y" "yn"
adv PREPARE ""
adv PREPARE_CONFIGURE ""
adv PREPARE_MAKE ""
adv PREPARE_RUN ""
adv RUN_COMMAND "runmpi"
adv SINGULARITY_COMMAND ""
def ENGINE slurm
def MAX_TASKS_PER_NODE 1
def MAX_TASKS_PER_NODE_FOR_COMPILATION 1

function MAX_TASKS_PER_NODE_CHECK {
	check_integer "$1"
}
function MAX_TASKS_PER_NODE_FOR_COMPILATION_CHECK {
	check_integer "$1"
}
function CORES_PER_TASK_FULL_CHECK {
	check_integer "$1"
}


adv CLUSTER "$(find_cluster)"

while true
do
	case "$1" in
		-h|--help) usage;;
		-y|--yes) agree=true;;
		-d|--default) def=true;;
		--slurm) fix ENGINE "slurm" ;;
		--pbs) fix ENGINE "pbs" ;;
		--local) fix ENGINE "local" ;;
		--gpu) fix RUN_GPU "y";;
		--cpu) fix RUN_GPU "n";;
		-c|--cluster) shift; fix CLUSTER "$1";;
		-no-cluster) shift; fix CLUSTER "";;
		*) break;;
	esac
	shift
done

ask CLUSTER "What cluster defaults to load"
source_cluster
ask ENGINE "What scheduler are you using (slurm|pbs|local)"
source_engine
ask GRANT "What is your grant name"
ask TCLB "What is the path to TCLB" path
ask RUN_SINGULARITY "Do you want to run in Singularity container"
ask RUN_GPU "Do you want to run on GPU"
ask CONFOPT "Provide ./configure options you want to use (please use single ' for quotes)"
ask RHOME "What is the path to R (without the bin/ part)"
ask DEBUG_QOS "What is the name of the debug qos"
ask MAIN_QOS "What is the name of the main qos to use"
ask DEBUG_PARTITION "What is the name of the debug partition"
ask MAIN_PARTITION "What is the name of the main partition to use"
ask MAX_TASKS_PER_NODE "What is the maximal number of (mpi) processes/gpus per node"
ask MAX_TASKS_PER_NODE_FOR_COMPILATION "What is the maximal number of (mpi) processes/gpus per node - for compilation"
ask CORES_PER_TASK_FULL "How many cores per task (i.e. mpi processes)"
ask MEMORY_PER_CORE "How much memory (GB) per core shall be declared (reserved)"
ask MODULES_BASE "What modules to load ('-' for unload) for running/compiling TCLB"
ask MODULES_ADD  "What additional modules to load for compilation"
ask MODULES_RUN  "What modules to load ('-' for unload) for running TCLB"
ask MODULES_CHECK_AVAILABILITY "Shall check availability of the modules on the cluster?"
ask PREPARE "What commands to run before running anything"
ask PREPARE_CONFIGURE "What commands to run before running anything"
ask PREPARE_MAKE "What commands to run before running make"
ask PREPARE_RUN "What commands to run before running TCLB"
ask RUN_COMMAND "What command to use to run MPI application (runmpi|srun|aprun)"
ask SINGULARITY_COMMAND "What command to use to run singularity container (singularity exec path_to_image.sif | singularity exec --nv path_to_image.sif)"

save_conf

if ! test -z "$MODULES_RUN"
then
	MODULES_RUN_LOAD="quiet_run module load $MODULES_RUN"
fi

if ! test -z "$MODULES_ADD"
then
	MODULES_ADD_LOAD="\$mod_add && quiet_run module load $MODULES_ADD"
fi

if ! test -z "$RHOME"
then
	RHOME_LOAD="export PATH=\"$RHOME/bin:\$PATH\""
fi

cat >$PP/mods.ini <<EOF

TYPE=\$1
test -z "\$TYPE" && TYPE=MAKE

function quiet_run {
	echo -n "\$@... "
	TMPF=\$(mktemp)
	if ! \$@ >"\$TMPF" 2>&1
	then
		echo "ERROR ------";
		cat "\$TMPF";
		echo "------- END -------";
		rm "\$TMPF";
		exit -1;
	else
		rm "\$TMPF";
		echo "OK"
	fi
}

if ! declare -f pb_msg >/dev/null
then
	function pb_msg { return 0; }
	function pb_file { return 0; }
else
	PB_CURL_OPT="--insecure"
fi

function say {
	MSG="\$@"
	pb_msg "\$SLURM_JOB_NAME" "\$MSG (after \$SECONDS s)"
}

$(test -z "$RHOME" || echo "export PATH=\"$RHOME/bin:\$PATH\"" )

case "\$TYPE" in
"MAKE")
	$(module_list $MODULES_BASE $MODULES_ADD $MODULES_RUN )
	$PREPARE_MAKE
	;;
"CONFIGURE")
	$(module_list $MODULES_BASE $MODULES_ADD $MODULES_RUN )
	$PREPARE_CONFIGURE
	;;
"RUN")
	$(module_list $MODULES_BASE $MODULES_RUN )
	$PREPARE_RUN
	;;
esac

$PREPARE


EOF


BATCH=true
q_header
q_queue $DEBUG_PARTITION
q_grant $GRANT
q_qos $DEBUG_QOS
q_walltime 00:15:00
echo

module_list $MODULES_BASE $MODULES_ADD $MODULES_RUN


exit 0

if ask_no "Do you want to install needed R packages now?"
then
	echo "salloc $(arg --partition $DEBUG_PARTITION) $(arg --account $GRANT) --ntasks=1 $(arg --qos $DEBUG_QOS) --time=00:15:00  $PP/exec.install --skipssl rdep"
		  salloc $(arg --partition $DEBUG_PARTITION) $(arg --account $GRANT) --ntasks=1 $(arg --qos $DEBUG_QOS) --time=00:15:00  $PP/exec.install --skipssl rdep
fi

if ask_yes "Do you want to run ./configure now?"
then
	echo "salloc $(arg --partition $DEBUG_PARTITION) $(arg --account $GRANT) --ntasks=1 $(arg --qos $DEBUG_QOS) --time=00:15:00 $PP/exec.configure $CONFOPT"
		  salloc $(arg --partition $DEBUG_PARTITION) $(arg --account $GRANT) --ntasks=1 $(arg --qos $DEBUG_QOS) --time=00:15:00 $PP/exec.configure $CONFOPT	
fi
