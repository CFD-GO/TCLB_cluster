#!/bin/bash

#set -e

PP=$(dirname $0)

if [ -f $PP/conf.ini ]
then
	. $PP/conf.ini
fi

function defgrant {
	sacctmgr -p --quiet list User $USER | cut -d '|' -f 2 | tail -n1
}

function checkgrant {
	[ -z "$1" ] && return 1
	NL=$(sacctmgr --quiet list Account "$1" | wc -l)
	[ $NL -ne 3 ] && return 1
	return 0
}

[ -z "$GRANT" ] && GRANT=$(defgrant)
[ ! -z "$GRANT" ] && GRANT_o=" [$GRANT]"
echo -n "What is your grant name$GRANT_o: "
read GRANT_n
[ ! -z "$GRANT_n" ] && GRANT=$GRANT_n

if [ -z "$GRANT" ]
then
	echo No grant provided. Exiting.
	exit -1
fi

if ! checkgrant $GRANT
then
	echo No such grant: $GRANT
	exit -1
fi

[ -z "$TCLB" ] && TCLB=$(pwd)
echo -n "What is the path to TCLB [$TCLB]: "
read TCLB_n
[ ! -z "$TCLB_n" ] && TCLB=$TCLB_n

if [ ! -d "$TCLB/src" ]
then
	echo there is no src subdirectory - something is wrong
	echo file not found: $TCLB/src
	exit -1;
else
	TCLB=$(cd $TCLB; pwd)
fi

PROGENV_l=$(module list 2>&1 | grep PrgEnv | sed 's/^.*) //') #Getting the PrgEnv module loaded now.
[ -z "$PROGENV" ] && PROGENV="$PROGENV_l"
echo -n "What PrgEnv you want to use [$PROGENV]: "
read PROGENV_n
[ ! -z "$PROGENV_n" ] && PROGENV="$PROGENV_n"

if [ -z "$(module av $PROGENV 2>&1)" ]
then
	echo there is no module $PROGENV
	exit -1;
fi

[ -z "$CONFOPT" ] && CONFOPT="--disable-cuda"
echo -n "Provide ./configure options you want to use (please use single ' for quotes) [$CONFOPT]: "
read CONFOPT_n
[ ! -z "$CONFOPT_n" ] && CONFOPT="$CONFOPT_n"

[ -z "$RHOME" ] && RHOME=$(R RHOME 2>/dev/null)
[ -z "$RHOME" ] && RHOME=$(echo /pawsey/cle*/apps/PrgEnv-gnu/*/gcc/*/haswell/r/*/bin/R | sed 's|bin/R||' | head -n1)
echo -n "What is the path to R (without the bin/ part) [$RHOME]: "
read RHOME_n
[ ! -z "$RHOME_n" ] && RHOME="$RHOME_n"

if [ ! -f "$RHOME/bin/R" ]
then
	echo R not found in $RHOME/bin/
	exit -1;
fi

cat >$PP/conf.ini <<EOF
GRANT="$GRANT"
TCLB="$TCLB"
PROGENV="$PROGENV"
CONFOPT="$CONFOPT"
RHOME="$RHOME"
EOF

cat >$PP/mods.ini <<EOF
module unload $PROGENV_l
module load $PROGENV
export PATH="$RHOME/bin:\$PATH"

if ! declare -f pb_msg >/dev/null
then
	function pb_msg { return 0; }
	function pb_file { return 0; }
else
	PB_CURL_OPT="--insecure"
fi

function say {
	MSG="\$@"
	pb_msg "\$SLURM_JOB_NAME" "\$MSG (after \$SECONDS s)"
}
EOF

echo -n "Do you want to install needed R packages now? [n]"
read ans
[ -z "$ans" ] && ans=n
[ "$ans" == "y" ] && salloc -p debugq --ntasks=1 $PP/exec.install skipssl rdep

echo -n "Do you want to run ./configure now? [y]"
read ans
[ -z "$ans" ] && ans=y
[ "$ans" == "y" ] && salloc -p debugq --ntasks=1 $PP/exec.configure $CONFOPT CC=cc CXX=CC
