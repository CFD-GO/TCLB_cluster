#!/bin/bash

#set -e

PP=$(dirname $0)

source $PP/lib.bash

while true
do
	case "$1" in
		-h|--help) usage;;
		-y|--yes) agree=true;;
		-d|--default) def=true;;
		*) break;;
	esac
	shift
done

source_conf
ask_init

GRANT_DEF="$(defgrant)"
TCLB_DEF="$(pwd)"
CONFOPT_DEF="--disable-cuda"
RHOME_DEF=$(R RHOME 2>/dev/null)
RUN_GPU_ASK="yn"
RUN_GPU_DEF="y"

source_cluster

ask GRANT "What is your grant name"

if [ -z "$GRANT" ]
then
	echo No grant provided.
	exit -1
fi

if ! checkgrant $GRANT
then
	echo No such grant: $GRANT
	exit -1
fi

ask TCLB "What is the path to TCLB" path

if [ ! -d "$TCLB/src" ]
then
	echo there is no src subdirectory - something is wrong
	echo file not found: $TCLB/src
	exit -1;
else
	TCLB=$(cd $TCLB; pwd)
fi

ask RUN_GPU "Do you want to run on GPU"



ask CONFOPT "Provide ./configure options you want to use (please use single ' for quotes)"

ask RHOME "What is the path to R (without the bin/ part)"

if test -z "$RHOME_ASK"
then
	if [ ! -f "$RHOME/bin/R" ]
	then
		echo R not found in $RHOME/bin/
		exit -1;
	fi
fi

ask DEBUGQ "What is the name of the debug queue/partition"
ask MAINQ "What is the name of the main queue/partition to use"
ask MAX_PPN "What is the maximal number of cores/gpus per node"
if test -z "$FULL_PPN_DEF"
then
	FULL_PPN_DEF="$MAX_PPN"
fi
ask FULL_PPN "For a fully allocated node, how many cores to declare"
ask MODULES_RUN "What modules to load for running TCLB"
ask MODULES_ADD "What additional modules to load for compilation"

for i in $MODULES_RUN $MODULES_ADD
do
	if [ -z "$(module av $i 2>&1)" ]
	then
		echo there is no module $i
		exit -1;
	fi
done
	

save_conf

if ! test -z "$MODULES_RUN"
then
	MODULES_RUN_LOAD="module load $MODULES_RUN"
fi

if ! test -z "$MODULES_ADD"
then
	MODULES_ADD_LOAD="\$mod_add && module load $MODULES_ADD"
fi

if ! test -z "$RHOME"
then
	RHOME_LOAD="export PATH=\"$RHOME/bin:\$PATH\""
fi

cat >$PP/mods.ini <<EOF
module purge
test -z "\$mod_add" && exit -1
$MODULES_ADD_LOAD
$MODULES_RUN_LOAD
$RHOME_LOAD

if ! declare -f pb_msg >/dev/null
then
	function pb_msg { return 0; }
	function pb_file { return 0; }
else
	PB_CURL_OPT="--insecure"
fi

function say {
	MSG="\$@"
	pb_msg "\$SLURM_JOB_NAME" "\$MSG (after \$SECONDS s)"
}
EOF

if ask_no "Do you want to install needed R packages now?"
then
	salloc -p $DEBUGQ --ntasks=1 $PP/exec.install skipssl rdep
fi

if ask_yes "Do you want to run ./configure now?"
then
	salloc -p $DEBUGQ --ntasks=1 $PP/exec.configure $CONFOPT
fi
